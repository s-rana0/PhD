# Plot
res.fp <- forest(res, slab=MA.data$author, atransf=exp, ylim=c(-1.5,9),
xlab="Hazard ratio", main=miR.lab, xlim=c(-10,5.5),
at=log(c(0.135,0.223,0.368,1,2.718,4.482)),
mlab=bquote(paste("Overall (Q=", .(formatC(res$QE, digits=2, format="f")), ", df=", .(res$k - res$p), ", p=", .(formatC(res$QEp, digits=2, format="f")), "; ", I^2, "=", .(formatC(res$I2, digits=1, format="f")), "%)")))
# Header
text(-9.5,7.7, 'Author (Study ID)', pos=4, font=2)
text(5.5,7.7, 'Hazard Ratio [95% CI]', pos=2, font=2)
###### Sensitivity analysis ######
SA.df <- leave1out(res, transf = exp)
results <- list(res, SA.df)
return(results)
}
## 6) Meta analysis for multivariate
ME_miR_multi <- function(data = SA.cox.multi, variable.name='miR-423-3p', miR.lab, test='REML', variable.interest='mir'){
# Gather info for that miR from all the datasets into one df
temp <- lapply(data, function(x)
as.data.frame(x[grep(variable.name, x[,variable.interest]), c('mir.HR', 'mir.pval', 'mir.LI', 'mir.UI','author')]))
SA.cox.multi.df <- do.call('rbind', temp)
# Calculate log effect size + standard errors
SA.cox.multi.df <- SA.cox.multi.df %>%
mutate(log.HR = log(mir.HR)) %>%
mutate(SEI = (log(mir.UI) - log(mir.LI))/(2*1.96))
MA.data <- data.frame(trial=seq(1, nrow(SA.cox.multi.df)),
author=SA.cox.multi.df$author,
SA.cox.multi.df)
# Run RMA
res <- rma(yi=log.HR, sei=SEI, data=MA.data, method=test)
# Plot
res.fp <- forest(res, slab=MA.data$author, atransf=exp, ylim=c(-1.5,8),
xlab="Hazard ratio", main=miR.lab, xlim=c(-9,5.5),
at=log(c(0.135,0.223,0.368,1,2.718,4.482)),
mlab=bquote(paste("Overall (Q=", .(formatC(res$QE, digits=2, format="f")), ", df=", .(res$k - res$p), ", p=", .(formatC(res$QEp, digits=2, format="f")), "; ", I^2, "=", .(formatC(res$I2, digits=1, format="f")), "%)")))
# Header
text(-8.5,6.5, 'Author (Study ID)', pos=4, font=2)
text(5.5,6.5, 'Hazard Ratio [95% CI]', pos=2, font=2)
###### Sensitivity analysis ######
SA.df <- leave1out(res, transf = exp)
results <- list(res, SA.df)
return(results)
}
## 1) initialise list to save cox results for clinical variables to BCR
SA.cox.adj <- list()
SA.cox.adj$Taylor_GSE21036 <- cox.reg.adjust(followup.df = Taylor.cox.df,
event = 'BCR',
event.time = 'event_time',
control_age = 'DxAge',
control_pT='PathStage',
control_psa = 'PreDxBxPSA',
control_gleason='PathGGS')
SA.cox.adj$Long_GSE26245 <- cox.reg.adjust(followup.df = Long.train.cox.df,
event = 'BCR',
event.time = 'time.to.event',
control_age = 'age',
control_pT='tumor.stage',
control_psa = 'psa',
control_gleason='gleason.score')
SA.cox.adj$Long_GSE26247 <- cox.reg.adjust(followup.df = Long.test.cox.df,
event = 'BCR',
event.time = 'time.to.event',
control_age = 'Age',
control_pT='tumor.stage',
control_psa = 'psa',
control_gleason='gleason.score')
SA.cox.adj$Leite_GSE46738 <- cox.reg.adjust(followup.df = Leite.cox.df,
event = 'BCR',
event.time = 'event_time',
control_age = 'age',
control_pT='tumor.stage',
control_psa = 'Pre.surgery.PSA',
control_gleason='gleason.score')
SA.cox.adj$Suer_GSE88958  <- cox.reg.adjust.Suer(followup.df = Suer.cox.df,
event = 'BCR',
event.time = 'days_to_BCR',
control_age = 'AGE',
control_psa = 'PSA',
control_gleason='gleason')
SA.cox.adj$TCGA_PRAD <- cox.reg.adjust(followup.df = TCGA.cox.df,
event = 'BCR',
event.time = 'event_time',
control_age = 'age_at_initial_pathologic_diagnosis',
control_pT='stage_T',
control_psa = 'stage_event_psa',
control_gleason='gleason')
## 2) Add citation
SA.cox.adj$Long_GSE26245$author <- 'Long 2011 (GSE26245)'
SA.cox.adj$Long_GSE26247$author <- 'Long 2011 (GSE26247)'
SA.cox.adj$Taylor_GSE21036$author <- 'Taylor 2010 (GSE21036)'
SA.cox.adj$Leite_GSE46738$author <- 'Leite 2015 (GSE46738)'
SA.cox.adj$Suer_GSE88958$author <- 'Suer 2018 (GSE88958)'
SA.cox.adj$TCGA_PRAD$author <- 'TCGA (TCGA-PRAD)'
SA.cox.adj <- do.call(rbind.data.frame, SA.cox.adj)
## 3) Prepare for meta-analysis
# Get logs of the values
SA.cox.adj <- SA.cox.adj %>%
mutate(log.HR=log(HR)) %>%
mutate(log.LI=log(LI)) %>%
mutate(log.UI=log(UI)) %>%
mutate(SEI=(log(UI) - log(LI))/(2*1.96))
MA.data <- data.frame(trial=seq(1, nrow(SA.cox.adj)),
author=SA.cox.adj$author,
SA.cox.adj)
par(mar=c(4.5,4,0,2))
temp <- MA.data[MA.data$variables=='age',]
res.age <- rma(yi=log.HR, sei=SEI, data=temp, method='REML')
res.fp <- forest(res.age, slab=temp$author, atransf=exp, xlab="Hazard ratio",
xlim=c(-0.45,0.35), mlab=bquote(paste("Overall (Q=", .(formatC(res.age$QE, digits=2, format="f")), ", df=", .(res.age$k - res.age$p), ", p=", .(formatC(res.age$QEp, digits=2, format="f")), "; ", I^2, "=", .(formatC(res.age$I2, digits=1, format="f")), "%)")))
temp <- MA.data[MA.data$variables=='G6-G7Vs>=G8',]
res.GG <- rma(yi=log.HR, sei=SEI, data=temp, method='REML')
res.fp <- forest(res.GG, slab=temp$author, atransf=exp, xlab="Hazard ratio",
xlim=c(-9,8), mlab=bquote(paste("Overall (Q=", .(formatC(res.GG$QE, digits=2, format="f")), ", df=", .(res.GG$k - res.GG$p), ", p=", .(formatC(res.GG$QEp, digits=2, format="f")), "; ", I^2, "=", .(formatC(res.GG$I2, digits=1, format="f")), "%)")))
# Header
text(-8.5,7.5, 'Author (Study ID)', pos=4, cex=1.1, font=2)
temp <- MA.data[MA.data$variables=='T1+T2VsT3+T4',]
res.pT <- rma(yi=log.HR, sei=SEI, data=temp, method='REML')
res.fp <- forest(res.pT, slab=temp$author, atransf=exp, xlab="Hazard ratio",
xlim=c(-9,8), mlab=bquote(paste("Overall (Q=", .(formatC(res.pT$QE, digits=2, format="f")), ", df=", .(res.pT$k - res.pT$p), ", p=", .(formatC(res.pT$QEp, digits=2, format="f")), "; ", I^2, "=", .(formatC(res.pT$I2, digits=1, format="f")), "%)")))
temp <- MA.data[MA.data$variables=='psa',]
res.psa <- rma(yi=log.HR, sei=SEI, data=temp, method='REML')
res.fp <- forest(res.psa, slab=temp$author, atransf=exp, xlab="Hazard ratio",
xlim=c(-0.75,0.55), mlab=bquote(paste("Overall (Q=", .(formatC(res.psa$QE, digits=2, format="f")), ", df=", .(res.psa$k - res.psa$p), ", p=", .(formatC(res.psa$QEp, digits=2, format="f")), "; ", I^2, "=", .(formatC(res.psa$I2, digits=1, format="f")), "%)")))
## 1) initialise list to save univariate results into and run func
SA.cox.uni <- list()
SA.cox.uni$Taylor_GSE21036 <- cox.reg.uni(followup.df = Taylor.cox.df,
event = 'BCR',
event.time = 'event_time',
no_features = 373,
save = 'N', save.path = '')
SA.cox.uni$Long_GSE26245 <- cox.reg.uni(followup.df = Long.train.cox.df,
event = 'BCR',
event.time = 'time.to.event',
no_features = 733,
save = 'N', save.path = '')
SA.cox.uni$Long_GSE26247 <- cox.reg.uni(followup.df = Long.test.cox.df,
event = 'BCR',
event.time = 'time.to.event',
no_features = 1145,
save = 'N', save.path = '')
SA.cox.uni$Leite_GSE46738 <- cox.reg.uni(followup.df = Leite.cox.df,
event = 'BCR',
event.time = 'event_time',
no_features = 847,
save = 'N', save.path = '')
SA.cox.uni$Suer_GSE88958 <- cox.reg.uni(followup.df = Suer.cox.df,
event = 'BCR',
event.time = 'days_to_BCR',
no_features = 847,
save = 'N', save.path = '')
SA.cox.uni$TCGA_PRAD <- cox.reg.uni(followup.df = TCGA.cox.df,
event = 'BCR',
event.time = 'event_time',
no_features = 328,
save = 'N', save.path = '')
## 2) Get miRs shared between the datasets and perform Univariate meta-analysis for them
common.miRs <- Reduce(intersect, list(SA.cox.uni$TCGA$miR,
SA.cox.uni$Leite_GSE46738$miR,
SA.cox.uni$Long_GSE26247$miR,
SA.cox.uni$Long_GSE26245$miR,
SA.cox.uni$Taylor_GSE21036$miR,
SA.cox.uni$Suer_GSE88958$miR)) #162
## 3) Add citation
SA.cox.uni$Taylor_GSE21036$author <- 'Taylor 2010 (GSE21036)'
SA.cox.uni$Long_GSE26245$author <- 'Long 2011 (GSE26245)'
SA.cox.uni$Long_GSE26247$author <- 'Long 2011 (GSE26247)'
SA.cox.uni$Leite_GSE46738$author <- 'Leite 2015 (GSE46738)'
SA.cox.uni$TCGA_PRAD$author <- 'TCGA (TCGA-PRAD)'
SA.cox.uni$Suer_GSE88958$author <- 'Suer 2018 (GSE88958)'
## 4) Perform meta-analysis
res.MA.uni <- lapply(common.miRs, function(x) ME_miR_uni(data=SA.cox.uni, miR=x, miR.lab=paste0('\n \n \n',x), test='REML', variable='miR'))
# Save the ME analysis results in a df
res.MA.uni.df <- data.frame(miR=common.miRs, HR=NA, CI.UB=NA, CI.LB=NA, p.val=NA, I_sq=NA, Q_p=NA, stringsAsFactors=F)
for(i in 1:length(res.MA.uni)){
res.MA.uni.df$HR[i] <- exp(res.MA.uni[[i]][[1]]$b)
res.MA.uni.df$CI.LB[i] <- exp(res.MA.uni[[i]][[1]]$ci.lb)
res.MA.uni.df$CI.UB[i] <- exp(res.MA.uni[[i]][[1]]$ci.ub)
res.MA.uni.df$p.val[i] <- res.MA.uni[[i]][[1]]$pval
res.MA.uni.df$I_sq[i] <- res.MA.uni[[i]][[1]]$I2
res.MA.uni.df$Q_p[i] <- res.MA.uni[[i]][[1]]$QEp
print(i)
}
# Adjust p-value
res.MA.uni.df$fdr.p <- p.adjust(p=res.MA.uni.df$p.val, method='fdr')
# Sig miRs
sig.ME.uni <- res.MA.uni.df$miR[res.MA.uni.df$p.val < 0.05] #18
sig.ME.uni
## 1) initialise list to save multivariate results into and run func
SA.cox.multi <- list()
SA.cox.multi$Taylor_GSE21036 <- cox.reg.multi(followup.df = Taylor.cox.df,
event = 'BCR',
control_pT='PathStage',
event.time = 'event_time',
no_features = 373,
control_gleason = 'PathGGS',
control_psa='PreDxBxPSA',
save = 'N',  save.path = '')
SA.cox.multi$Long_GSE26245 <- cox.reg.multi(followup.df = Long.train.cox.df,
event = 'BCR',
event.time = 'time.to.event',
no_features = 733,
control_gleason = 'gleason.score',
control_psa='psa',
control_pT='tumor.stage',
save = 'N', save.path = '')
SA.cox.multi$Long_GSE26247 <- cox.reg.multi(followup.df = Long.test.cox.df,
event = 'BCR',
event.time = 'time.to.event',
no_features = 1145,
control_gleason = 'gleason.score',
control_psa='psa',
control_pT='tumor.stage',
save = 'N', save.path = '')
SA.cox.multi$Leite_GSE46738 <- cox.reg.multi(followup.df = Leite.cox.df,
event = 'BCR',
event.time = 'event_time',
no_features = 847,
control_gleason = 'gleason.score',
control_psa='Pre.surgery.PSA',
control_pT='tumor.stage',
save = 'N', save.path = '')
SA.cox.multi$TCGA_PRAD <- cox.reg.multi(followup.df = TCGA.cox.df,
event = 'BCR',
event.time = 'event_time',
no_features = 328,
control_gleason = 'gleason',
control_psa='stage_event_psa',
control_pT='stage_T',
save = 'N', save.path = '')
## 2) Add citation
SA.cox.multi$Taylor_GSE21036$author <- 'Taylor 2010 (GSE21036)'
SA.cox.multi$Long_GSE26245$author <- 'Long 2011 (GSE26245)'
SA.cox.multi$Long_GSE26247$author <- 'Long 2011 (GSE26247)'
SA.cox.multi$Leite_GSE46738$author <- 'Leite 2015 (GSE46738)'
SA.cox.multi$TCGA_PRAD$author <- 'TCGA (TCGA-PRAD)'
## 3) Get miRs shared between the datasets and perform multivariate meta-analysis for them
common.miRs.multi <- Reduce(intersect, list(SA.cox.multi$TCGA$mir,
SA.cox.multi$Leite_GSE46738$mir,
SA.cox.multi$Long_GSE26247$mir,
SA.cox.multi$Long_GSE26245$mir,
SA.cox.multi$Taylor_GSE21036$mir)) #164
## 4) Perform mixed effects meta-analysis
res.MA.multi <- lapply(common.miRs.multi, function(x) ME_miR_multi(data = SA.cox.multi, variable.name=x, miR.lab=paste0('\n \n \n',x), test='REML', variable.interest='mir'))
# Save the ME analysis results in a df
res.MA.multi.df <- data.frame(miR=common.miRs.multi, HR=NA, CI.UB=NA, CI.LB=NA, p.val=NA, I_sq=NA, Q_p=NA, stringsAsFactors=F)
for(i in 1:length(res.MA.multi)){
res.MA.multi.df$HR[i] <- exp(res.MA.multi[[i]][[1]]$b)
res.MA.multi.df$CI.LB[i] <- exp(res.MA.multi[[i]][[1]]$ci.lb)
res.MA.multi.df$CI.UB[i] <- exp(res.MA.multi[[i]][[1]]$ci.ub)
res.MA.multi.df$p.val[i] <- res.MA.multi[[i]][[1]]$pval
res.MA.multi.df$I_sq[i] <- res.MA.multi[[i]][[1]]$I2
res.MA.multi.df$Q_p[i] <- res.MA.multi[[i]][[1]]$QEp
print(i)
}
# Adjust p-value
res.MA.multi.df$fdr.p <- p.adjust(p=res.MA.multi.df$p.val, method='fdr')
# sig miRs
sig.ME.multi <- res.MA.multi.df$miR[res.MA.multi.df$p.val < 0.05] #16
sig.ME.multi
##### BCR #####
## 1) Initialise a df to add clinical info into
ME_stats <- data.frame(study= names(SA.cox.uni), stringsAsFactors = F)
# Add relapse info
ME_stats$total.samples <- c(nrow(Taylor.cox.df),
nrow(Long.train.cox.df),
nrow(Long.test.cox.df),
nrow(Leite.cox.df),
nrow(Suer.cox.df),
nrow(TCGA.cox.df))
ME_stats$samples.BCR <- c(sum(Taylor.cox.df$BCR==2),
sum(Long.train.cox.df$BCR==2),
sum(Long.test.cox.df$BCR==2),
sum(Leite.cox.df$BCR==2),
sum(Suer.cox.df$BCR==2),
sum(TCGA.cox.df$BCR==2))
ME_stats$samples.noBCR <- c(sum(Taylor.cox.df$BCR!=2),
sum(Long.train.cox.df$BCR!=2),
sum(Long.test.cox.df$BCR!=2),
sum(Leite.cox.df$BCR!=2),
sum(Suer.cox.df$BCR!=2),
sum(TCGA.cox.df$BCR!=2))
# Add citation
ME_stats$study2 <- c('GSE21036','GSE26245','GSE26247','GSE46738','GSE88958','TCGA-PRAD')
## 2) Prepare for barplot
ME_stats_bp <- ME_stats[,c('study2', 'samples.BCR', 'samples.noBCR')]
ME_stats_bp$study2 <- factor(ME_stats_bp$study2, levels = c('TCGA-PRAD', 'GSE88958','GSE46738','GSE26247','GSE26245','GSE21036'))
# Stats test
temp <- t(ME_stats_bp); colnames(temp) <- temp[1,]; temp <- temp[-1,]
temp <- apply(temp, 2, function(x) as.numeric(x))
chisq <- chisq.test(temp); p <- signif(chisq$p.value, 2)
## 3) Plot
ME_stats_bp <- melt(ME_stats_bp, id.vars="study2", measure.vars=c("samples.BCR", "samples.noBCR"))
colnames(ME_stats_bp) <- c('study2', 'BCR', 'no.samples')
ME_stats_bp$BCR <- c('Yes', 'No')[ME_stats_bp$BCR]
#
plot.BCR <- ggplot(ME_stats_bp, aes(fill= BCR, y= no.samples, x= study2)) +
geom_bar(stat='identity', width=0.8, position='fill')  +
scale_fill_brewer(palette = "Set1") + theme_bw() +
theme(axis.text.x = element_text(angle = 60, hjust = 1, size = 13),
axis.text.y = element_text(size = 13),
axis.title.x = element_blank(),
text=element_text(size=13))  +
xlab('') + ylab('prop of samples')
plot.BCR
##### AGE #####
## 1) Add age info to ME_stats
# median
ME_stats$median.age <- c(median(Taylor.cox.df$DxAge),
median(Long.train.cox.df$age),
median(Long.test.cox.df$Age),
median(Leite.cox.df$age[!is.na(Leite.cox.df$age)]),
median(Suer.cox.df$AGE),
median(TCGA.cox.df$age_at_initial_pathologic_diagnosis))
# range age
ME_stats$range.age <- c(paste(range(Taylor.cox.df$DxAge), collapse='-'),
paste(range(Long.train.cox.df$age), collapse='-'),
paste(range(Long.test.cox.df$Age), collapse='-'),
paste(range(Leite.cox.df$age[!is.na(Leite.cox.df$age)]), collapse='-'),
paste(range(Suer.cox.df$AGE), collapse='-'),
paste(range(TCGA.cox.df$age_at_initial_pathologic_diagnosis), collapse='-'))
## 2) Prepare a df in order to scatter plot for age variable
hist.age <- rbind(data.frame(age= TCGA.cox.df$age_at_initial_pathologic_diagnosis, study=rep('TCGA-PRAD')),
data.frame(age= Suer.cox.df$AGE, study=rep('GSE88958')),
data.frame(age= Leite.cox.df$age, study=rep('GSE46738')),
data.frame(age= Long.test.cox.df$Age, study=rep('GSE26247')),
data.frame(age= Long.train.cox.df$age, study=rep('GSE26245')),
data.frame(age= Taylor.cox.df$DxAge, study=rep('GSE21036')))
# Perform statistical test
x = lm(age ~ study, data = hist.age)
summary(x); confint(x)
anova.res <- anova(x); p <- signif(anova.res$`Pr(>F)`[1], 3)
## 3) plot
box.age <- ggplot(hist.age, aes(y=age, x=study)) + theme_bw() +
geom_boxplot(outlier.shape= NA) + ylab('Age (yrs)') + #xlab('') +
geom_jitter(shape=16, position=position_jitter(0.2), alpha=0.4, colour='red') +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 60, hjust = 1, size = 13),
axis.text.y = element_text(size=13),
axis.title.y = element_text(size=13))
box.age
##### PSA #####
## 1) Prepare a df in order to scatter plot for age variable
hist.psa <- rbind(data.frame(psa= as.numeric(TCGA.cox.df$stage_event_psa), study=rep('TCGA-PRAD')),
data.frame(psa= as.numeric(Suer.cox.df$PSA)[!is.na(as.numeric(Suer.cox.df$PSA))], study=rep('GSE88958')),
data.frame(psa= Leite.cox.df$Pre.surgery.PSA, study=rep('GSE46738')),
data.frame(psa= Long.test.cox.df$psa, study=rep('GSE26247')),
data.frame(psa= Long.train.cox.df$psa, study=rep('GSE26245')),
data.frame(psa= Taylor.cox.df$PreDxBxPSA, study=rep('GSE21036')))
# Edit the psa column
hist.psa <- hist.psa %>%
mutate(psa = as.numeric(psa)) %>%
filter(!is.na(psa))
## 2) Perform statistical test
x = lm(psa ~ study, data = hist.psa)
summary(x); confint(x)
KW <- kruskal.test(age ~ study, data = hist.age)
p <- signif(KW$p.value,2)
# 3) Plot
box.psa <- ggplot(hist.psa, aes(y=psa, x=study)) +
geom_boxplot(outlier.shape= NA) + ylab('PSA (ng/mL)') +
ylim(c(0,40)) + theme_bw() +
geom_jitter(shape=16, position=position_jitter(0.2), alpha=0.4, colour='red') +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 60, hjust = 1, size = 13),
axis.text.y = element_text(size=13),
axis.title.y = element_text(size=13))
box.psa
##### Gleason grade #####
## 1) Append gleason info in ME_stats
# table(TCGA.cox.df$gleason)
ME_stats$ggs.6 <- c(32, 18, 12, 15, 8, 44)
ME_stats$ggs.7 <- c(54, 39, 18, 13, 17, 212)
ME_stats$ggs.8_10 <- c(12, 6, 10, 22, 5, 177)
## 2) Subset for stats test and barplot
temp.1 <- t(ME_stats[,c('ggs.6', 'ggs.7', 'ggs.8_10')])
rownames(temp.1) <- c('<=6', '7', '>=8')
colnames(temp.1) <- c('GSE21036','GSE26245','GSE26247','GSE46738', 'GSE88958','TCGA-PRAD')
# Stats test
chisq.p <- chisq.test(temp.1); p <- signif(chisq.p$p.value, 3)
## 3) Prepare for plot
temp.2 <- melt(temp.1, id.vars= 'gleason')
colnames(temp.2) <- c('gleason', 'study', 'value')
temp.2$value <- as.numeric(temp.2$value)
temp.2$study <- factor(temp.2$study, levels = c('TCGA-PRAD', 'GSE88958', 'GSE46738', 'GSE26247', 'GSE26245', 'GSE21036'))
temp.2$gleason <- factor(temp.2$gleason, levels = c('<=6', '7', '>=8'))
## 4) Gleason bar plot
bar.plot.gleason.prop <- ggplot(temp.2, aes(x=study, y=value, fill=gleason)) +
geom_bar(stat='identity', width=0.8, position='fill') + theme_bw() +# xlab('') +
ylab('prop. of samples') + scale_fill_brewer(palette = "Set1") +
theme(axis.text.x = element_text(angle = 60, hjust = 1, size = 13),
axis.text.y = element_text(size = 13),
axis.title.x= element_blank(),
#plot.title = element_text(size =13, hjust=0.5, vjust=0)
text=element_text(size=13)) +
#ggtitle(expression(paste('Gleason grade sum (', X^2,' p= 8.2e-20)')) +
guides(fill=guide_legend(title="Gleason \n sum"))
bar.plot.gleason.prop
##### pT stage #####
## 1) Append gleason info in ME_stats
# Firstly, Remove a-c first
TCGA.cox.df$stage_pT <- as.factor(gsub('[a-c]', '', TCGA.cox.df$stage_T))
Taylor.cox.df$stage_pT <- as.factor(gsub('[A-C]', '', Taylor.cox.df$PathStage))
Long.test.cox.df$stage_pT <- as.factor(gsub('[a-c]', '', Long.test.cox.df$tumor.stage))
Long.train.cox.df$stage_pT <- as.factor(gsub('[a-c]', '', Long.train.cox.df$tumor.stage))
Leite.cox.df$stage_pT <- as.factor(gsub('[a-c]', '', Leite.cox.df$tumor.stage))
# get total and append to ME_stats
# table(TCGA.cox.df$stage_pT)
ME_stats$stage.T1 <- c(0, 12, 0, 0, NA, 2)
ME_stats$stage.T2 <- c(69, 42, 27, 28, NA, 168)
ME_stats$stage.T3 <- c(25, 6, 10, 28, NA, 251)
ME_stats$stage.T4 <- c(5, 3, 3, 0, NA, 9)
# 2) Subset for stats test and barplot
temp.1 <- t(ME_stats[c(1:4,6), c('stage.T1', 'stage.T2', 'stage.T3', 'stage.T4')])
rownames(temp.1) <- c('T1', 'T2', 'T3', 'T4')
colnames(temp.1) <- c('GSE21036','GSE26245','GSE26247','GSE46738', 'TCGA-PRAD')
# Stats test
chisq.p <- chisq.test(temp.1); p <- signif(chisq.p$p.value, 3)
# 3) Prepare for plot
temp.2 <- melt(temp.1, id.vars= 'stage')
colnames(temp.2) <- c('stage', 'study', 'value')
temp.2$value <- as.numeric(temp.2$value)
temp.2$study <- factor(temp.2$study, levels = c('TCGA-PRAD', 'GSE46738', 'GSE26247', 'GSE26245', 'GSE21036'))
# 4) Plot
bar.plot.pT.prop <- ggplot(temp.2, aes(x=study, y=value, fill=stage)) +
geom_bar(stat='identity', width=0.8, position='fill') + theme_bw() +
# ggtitle(expression(paste('Tumour stage (',X^2,' p= 2.6e-31)'))) +
ylab('prop. of samples') + scale_fill_brewer(palette = "Set1") + #xlab('')+
theme(axis.text.x = element_text(angle = 60, hjust = 1, size = 13),
axis.text.y = element_text(size = 13),
axis.title.x= element_blank(),
# plot.title = element_text(size =13, hjust=0.5, vjust=0),
text=element_text(size=13)) +
guides(fill=guide_legend(title="pT"))
bar.plot.pT.prop
# Common miRs between ME and SE?
intersect(sig.ME.uni, sig.ME.multi)
intersect(SE.miRs, intersect(sig.ME.uni, sig.ME.multi))
## 1) Systematic-review miRs
SE.miRs <- c('let-7b-5p', 'miR-141-3p', 'miR-145-5p', 'miR-152-3p', 'miR-182-5p', 'miR-195-5p', 'miR-205-5p')
####################################################################
###################### miR family/ clusters ########################
####################################################################
## Any of significant miRs in our analysis part of miR families/ clusters?
## 1) Load miR family database
miR.fam <- read.csv('data/miRbase/miFam.dat', stringsAsFactors = F, na.strings = c(''), header = F, sep='\ ')
# Edit miR.fam db
miR.fam <- miR.fam %>%
select(V1,V4,V6) %>%
filter(V1 != '//') %>% filter(V1 != 'AC') %>%
mutate(species=substr(V6,1,3), ID=NA) %>%
filter(species == 'hsa' | is.na(species)) #keep only HSA or NA
# For each miR family, list its miR members
ind <- grep('ID', miR.fam$V1); miR.fam$ID[ind] <- miR.fam$V4[ind]
miR.fam <- miR.fam %>% fill(ID) %>% filter(V1=='MI')
# List
miR.fam <- split(miR.fam$V6,miR.fam$ID)
## 2) Load miR cluster database
miR.cluster.original <- read.csv('data/miRbase/miRBase_miRs.csv', stringsAsFactors = F, na.strings = c(''))
# Edit miR.fam db
miR.cluster.original  <- miR.cluster.original %>%
filter(miRNA_type == 'miRNA_primary_transcript') %>%
mutate_at(.vars='ID', .funs=gsub, pattern='.*\\=', replacement='') %>%
mutate_at(.vars='Alias', .funs=gsub, pattern='.*\\=', replacement='') %>%
mutate_at(.vars='Name', .funs=gsub, pattern='.*\\=', replacement='') %>%
mutate_at(.vars='Derives_from', .funs=gsub, pattern='.*\\=', replacement='')
## 3) Function to check the miR clusters formed for a given miR. Cluster defined as any miRs with less than 10kb inter miR distance.
clustered_miRNA <- function(miR, inter_miR_distance = 10000, clusters.df=miR.cluster.original){
grepped <- grep(paste(miR,'$', sep=''), clusters.df$Name, value =T)
if (length(grepped) > 1){
stop(paste('Please use pri-miR nomenclature instead of mature miR nomenclature.Did you mean any of these miRs:', paste(grepped, collapse= ', '), '?', sep=' '))
}
miR_start <- clusters.df$ch_start[match(miR, clusters.df$Name)]
difference <- abs(clusters.df$ch_start - miR_start)
clusters_index <- which(difference < inter_miR_distance)
clusters <- clusters.df$Name[clusters_index]
len.clusters <- paste0('n=',length(clusters))
return(paste(c(clusters,len.clusters), collapse=','))
}
clustered_miRNA(miR='hsa-mir-99b', inter_miR_distance = 10000, clusters.df=miR.cluster.original)
## 4) To check if any of these miRs form miR families and clusters create a function
common.fam.clust <- function(miR.group){
# Subset miR.cluster.original to include only miRs of interest
miR.cluster <- miR.cluster.original %>%
filter(Name %in% paste0('hsa-', gsub('-.p$', '', tolower(miR.group))))
df <- data.frame(mature_miRs=miR.group,
pri.miRs.id=paste0('hsa-', gsub('-.p$', '', tolower(miR.group))),
family=NA, clusters=NA, no.clusters=NA, stringsAsFactors=F)
for (i in 1:nrow(df)){
# Family
del <- unlist(lapply(miR.fam, function(x) grep(paste0(df$pri.miRs.id[i], '$'), x)))
df$family[i] <- ifelse(length(del) > 0, names(del), NA)
#clusters
df$clusters[i] <- gsub(',n.*$', '', clustered_miRNA(df$pri.miRs.id[i], inter_miR_distance = 10000, clusters.df=miR.cluster))
df$no.clusters[i] <- gsub('^.*n=', '', clustered_miRNA(df$pri.miRs.id[i], inter_miR_distance = 10000, clusters.df=miR.cluster))
print(i)
}
return (df)
}
### Check if the group of miRs form families/ clusters
fam.clust.uni <- common.fam.clust(sig.ME.uni)
fam.clust.multi <- common.fam.clust(sig.ME.multi)
save.image('code/MetaAnalysis_CoxPH.Rdata')
dev.off()
rm(KW, MA.data, ME_stats, ME_stats_bp)
rm(list=ls(pattern='hist.'))
rm(list=ls(pattern='temp.'))
rm(list=ls(pattern='bar.plot.'))
rm(list=ls(pattern='chisq'))
rm(plot.BCR, res.age,res.fp, res.GG)
rm(res.psa, res.pT)
rm(temp, x, i)
rm(ind, p)
rm(box.age, anova.res, box.psa)
save.image('code/MetaAnalysis_CoxPH.Rdata')
