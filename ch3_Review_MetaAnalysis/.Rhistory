table(c_patient$history_of_neoadjuvant_treatment)
table(c_patient$person_neoplasm_cancer_status)
table(c_patient$ethnicity)
table(c_patient$histological_type)
table(c_patient$histological_type_other)
table(c_patient$zone_of_origin)
table(c_patient$laterality)
table(c_patient$tumor_levels)
table(c_patient$initial_pathologic_diagnosis_method)
View(c_patient[,c(50:68)])
table(c_patient$biochemical_recurrence)
table(c_patient$stage_event_system_version)
table(c_patient$stage_event_clinical_stage)
table(c_patient$stage_event_pathologic_stage)
table(c_patient$stage_event_serum_markers)
table(c_patient$stage_event_igcccg_stage)
table(c_patient$stage_event_masaoka_stage)
table(c_patient$zone_of_origin)
## 2) Prepare clinical data for TCGA
c_patient <- c_patient %>%
# select clinicopathological features
select(bcr_patient_barcode, stage_event_psa, stage_event_tnm_categories, stage_event_gleason_grading, age_at_initial_pathologic_diagnosis, vital_status, race_list, ethnicity, tissue_source_site) %>%
# delete duplicated entries which are identical
filter(!duplicated(bcr_patient_barcode)) %>%
# append sum gleason
mutate(gleason=case_when(substring(stage_event_gleason_grading,1,1)=='1'~'10',
TRUE~substring(stage_event_gleason_grading,1,1))) %>%
# separate TNM staging to separate categories
mutate(stage_N=gsub('.*(N[0-9]).*', "\\1", stage_event_tnm_categories)) %>%
mutate(stage_M=gsub('.*(M[0-9]).*', "\\1", stage_event_tnm_categories)) %>%
mutate(stage_combT=gsub('M[0-9]|N[0-9]', "\\1", stage_event_tnm_categories)) %>%
# Get the second/ more extreme pT scoring
mutate(stage_T=gsub('^T.*(T.*)', '\\1', stage_combT)) #500 10
# If T N or M dont have associated scores, replace them with NA
c_patient$stage_N[grep('N', c_patient$stage_N, invert=T)] <- NA
c_patient$stage_M[grep('M', c_patient$stage_M, invert=T)] <- NA
c_patient$stage_T[grep('T', c_patient$stage_T, invert=T)] <- NA
## 3) Get follow up data ready so it can be merged with c_patient
c_follow_up <- c_follow_up %>%
# select relevant coluns
select(bcr_patient_barcode, lost_follow_up, days_to_last_followup, days_to_death, days_to_first_biochemical_recurrence, year_of_form_completion) %>%
# BCR experienced? Yes: 2, No: 1
mutate(BCR = case_when(!is.na(days_to_first_biochemical_recurrence) ~ 2,
TRUE ~ 1)) %>%
# if days to death available, combine it with days to last follow up
mutate(last_followup = case_when(!is.na(days_to_death) ~ days_to_death,
TRUE ~ days_to_last_followup)) %>%
# merge days to BCR and last follow-up
mutate(event_time=case_when(!is.na(days_to_first_biochemical_recurrence)~c_follow_up$days_to_first_biochemical_recurrence,
TRUE ~ last_followup)) %>%
# remove samples without follow-up info as they cannot be right censored
filter(!is.na(last_followup)) #504 4
c_follow_up <- GDCprepare_clinic(clin.query, clinical.info = 'follow_up')
View(c_follow_up)
## 3) Get follow up data ready so it can be merged with c_patient
c_follow_up <- c_follow_up %>%
# select relevant coluns
select(bcr_patient_barcode, lost_follow_up, days_to_last_followup, days_to_death, days_to_first_biochemical_recurrence, year_of_form_completion) %>%
# BCR experienced? Yes: 2, No: 1
mutate(BCR = case_when(!is.na(days_to_first_biochemical_recurrence) ~ 2,
TRUE ~ 1)) %>%
# if days to death available, combine it with days to last follow up
mutate(last_followup = case_when(!is.na(days_to_death) ~ days_to_death,
TRUE ~ days_to_last_followup)) %>%
# merge days to BCR and last follow-up
mutate(event_time=case_when(!is.na(days_to_first_biochemical_recurrence)~c_follow_up$days_to_first_biochemical_recurrence,
TRUE ~ last_followup)) %>%
# remove samples without follow-up info as they cannot be right censored
filter(!is.na(last_followup)) #504 4
## 4) Some samples have multiple follow-up entries. If they experience BCR, select the first recorded BCR entry. If they do not experience BCR, select the latest follow up entry.
ind <- c_follow_up$bcr_patient_barcode[duplicated(c_follow_up$bcr_patient_barcode)]
unique.df <- c_follow_up[(!c_follow_up$bcr_patient_barcode %in% ind),] #372
## create temporary dfs: with BCR and without BCR event
multiple.df.BCR <- c_follow_up %>%
# select non unique samples
filter(bcr_patient_barcode %in% ind) %>%
# select samples that experience BCR
filter(BCR==2) %>% #17
# sort according to patient ID and event time
arrange(bcr_patient_barcode, event_time) %>%
# select first entry: as its the earliest time point when BCR experience recorded
filter(!duplicated(bcr_patient_barcode)) #12
### w/o BCR
multiple.df.no.BCR <- c_follow_up %>%
filter(bcr_patient_barcode %in% ind) %>%
filter(BCR==1) %>% #115
arrange(bcr_patient_barcode, desc(event_time)) %>%
# select first entry: as its the latest follow-up entry
filter(!duplicated(bcr_patient_barcode)) %>%
# remove entries with BCR info in multiple.df.no.BCR
filter(!bcr_patient_barcode %in% multiple.df.BCR$bcr_patient_barcode) #54
## merge unique.df, multiple.df.BCR and multiple.df.no.BCR
c_follow_up <- bind_rows(unique.df, multiple.df.BCR, multiple.df.no.BCR) #438
## 5) Add follow up info to c_patient
c_patient <- c_patient %>%
# append BCR column
mutate(BCR=c_follow_up$BCR[match(bcr_patient_barcode, c_follow_up$bcr_patient_barcode)]) %>%
# append time to BCR column
mutate(event_time=c_follow_up$event_time[match(bcr_patient_barcode, c_follow_up$bcr_patient_barcode)])
dim(c_patient)
View(c_patient)
## 7) Upload corresponding pheno metadata of maturemirnacounts
pheno_manifest <- read.csv('/home/sharmila/Documents/github_projects/ch3_Review_MetaAnalysis/data/TCGA/mir_metadata.csv', check.names=F, stringsAsFactors=F)
View(pheno_manifest)
keep(c_patient)
keep(c_patient, sure=T)
getwd()
save.image('/home/sharmila/Documents/github_projects_with_data/ch4_PrognosticModels/code/PrognosticMirModels_200630.Rdata')
load('/home/sharmila/Documents/github_projects_with_data/ch4_PrognosticModels/code/PrognosticMirModels.R')
library(dplyr)
library(tidyr)
library(gdata)
library(openxlsx)
library(edgeR)
library(caret)
library(TCGAbiolinks)
library(stringr)
load('/home/sharmila/Documents/github_projects_with_data/ch4_PrognosticModels/code/PrognosticMirModels.R')
load('/home/sharmila/Documents/github_projects_with_data/ch4_PrognosticModels/code/PrognosticMirModels.Rdata')
load('/home/sharmila/Documents/github_projects_with_data/ch4_PrognosticModels/code/PrognosticMirModels_200630.Rdata')
counts <- counts[,recur.samp.df$file.id.isomir]
## 1) Subset samples with follow up info in the counts
recur.samp.df <- c_patient %>%
# only select samples with followup
filter(!is.na(BCR)) %>%
# select samples present in counts
filter(file.id.isomir %in% colnames(counts))
intersect(recur.samp.df$file.id.isomir, colnames(counts)) #433(met+4ffpe samples removed?)
counts <- counts[,recur.samp.df$file.id.isomir]
## 2) Split data into train:test set (85:15)
outcome <- as.character(recur.samp.df$BCR) #433
samples.part <- createDataPartition(y=outcome, times=5, p=0.85)
lapply(samples.part, function(y) table(outcome[y])) #17.14% recurrent samples in train set
lapply(samples.part, function(y) table(outcome[setdiff(seq(1, 433, by=1), y)])) #16.36% recurrent samples in test set
counts <- counts[,recur.samp.df$file.id.isomir]
dim(counts)
recur.samp.df$file.id.isomir
dim(counts)
#
save.image('/home/sharmila/Documents/github_projects_with_data/ch4_PrognosticModels/code/PrognosticMirModels_200630.Rdata')
z <- lapply(samples.part, function(x) counts[,x])
lapply(z, dim)
x$Resample1
samples.part$Resample1
pp <- counts.recur[,x$Resample1]
pp <- counts[,samples.part$Resample1]
identical(pp, z$Resample1)
pp <- counts[,samples.part$Resample5]
identical(pp, z$Resample5)
z
names(z)
## 3) Create list and populate with train and test dfs
TrainSet <- lapply(samples.part, function(x) counts[,x])
rm(z, pp)
TestSet <- lapply(samples.part, function(x) counts[,(setdiff(seq(1, 433, by=1), x)])
TestSet <- lapply(samples.part, function(x) counts[,setdiff(seq(1, 433, by=1), x)])
length(outcome)
samples.part$Resample1
pp <- counts.recur[,setdiff(seq(1, 433, by=1), samples.part$Resample1)]
pp <- counts[,setdiff(seq(1, 433, by=1), samples.part$Resample1)]
identical(TestSet, pp)
setdiff(seq(1, 433, by=1), samples.part$Resample1)
dim(TestSet$Resample1)
dim(pp)
identical(TestSet$Resample1, pp)
pp <- counts[,setdiff(seq(1, 433, by=1), samples.part$Resample5)]
identical(TestSet$Resample5, pp)
rm(pp)
TestSet <- lapply(samples.part, function(x) counts[,setdiff(seq(1, 433, by=1), x)])
#
save.image('/home/sharmila/Documents/github_projects_with_data/ch4_PrognosticModels/code/PrognosticMirModels_200630.Rdata')
load('/home/sharmila/Documents/github_projects_with_data/ch4_PrognosticModels/code/PrognosticMirModels_200630.Rdata')
samples.part
?cpm
??cpm
rm(list=ls())
?cpm
??cpm
library(edgeR)
??cpm
library(limma)
??cpm
## 2) Split data into train:test set (75:25)
set.seed(1000)
load('/home/sharmila/Documents/github_projects_with_data/ch4_PrognosticModels/code/PrognosticMirModels_200630.Rdata')
## 2) Split data into train:test set (85:15)
set.seed(1000)
outcome <- as.character(recur.samp.df$BCR) #433
samples.part <- createDataPartition(y=outcome, times=6, p=0.85)
lapply(samples.part, function(y) table(outcome[y])) #17.14% recurrent samples in train set
lapply(samples.part, function(y) table(outcome[setdiff(seq(1, 433, by=1), y)])) #16.36% recurrent samples in test set
samples.part
samples.part <- createDataPartition(y=outcome, times=6, p=0.85)
library(caret)
## 2) Split data into train:test set (85:15)
set.seed(1000)
outcome <- as.character(recur.samp.df$BCR) #433
samples.part <- createDataPartition(y=outcome, times=6, p=0.85)
lapply(samples.part, function(y) table(outcome[y])) #17.14% recurrent samples in train set
lapply(samples.part, function(y) table(outcome[setdiff(seq(1, 433, by=1), y)])) #16.36% recurrent samples in test set
save.image('/home/sharmila/Documents/github_projects_with_data/ch4_PrognosticModels/code/PrognosticMirModels_200630.Rdata')
lapply(samples.part, function(y) table(outcome[y])) #17.14% recurrent samples in train set?cpm
?cpm
rm(list=ls())
load('/home/sharmila/Documents/github_projects_with_data/ch4_PrognosticModels/code/PrognosticMirModels_200630.Rdata')
##################################################
## performed in HPC, load partitioned raw matrices
load('/home/sharmila/Documents/github_projects_with_data/ch4_PrognosticModels/code/HPC_filtered_isomiRs5_6.Rdata')
TrainSet.raw$part1
dim(TrainSet.raw$part1)
lapply(TrainSet.raw, dim)
lapply(TestSet.raw, dim)
library(dplyr)
library(tidyr)
library(gdata)
library(openxlsx)
library(edgeR)
library(caret)
# library(TCGAbiolinks)
library(stringr)
load('/home/sharmila/Documents/github_projects_with_data/ch4_PrognosticModels/code/PrognosticMirModels_200630.Rdata')
rm(counts)
##################################################
## performed in HPC, load partitioned raw matrices
load('/home/sharmila/Documents/github_projects_with_data/ch4_PrognosticModels/code/HPC_filtered_isomiRs5_6.Rdata')
#
save.image('/home/sharmila/Documents/github_projects_with_data/ch4_PrognosticModels/code/PrognosticMirModels_200703.Rdata')
rm(list=ls(pattern='prop_samp_'))
#
save.image('/home/sharmila/Documents/github_projects_with_data/ch4_PrognosticModels/code/PrognosticMirModels_200703.Rdata')
## 6) Normalisation using TMM
# Function to apply normalisation
normalise.TMM <- function(train.df=TrainSet.raw[[1]], test.df=TestSet.raw[[1]]){
# Train
dgList <- DGEList(counts=train.df, genes=rownames(train.df))
dgList <- calcNormFactors(dgList, method='TMM')
Train.cts <- data.frame(t(cpm(dgList_norm, normalized.lib.sizes = T, log=F)))
colnames(Train.cts) <- gsub('\\.', '_', colnames(Train.cts))
# test
dgList <- DGEList(counts=test.df, genes=rownames(test.df))
dgList <- calcNormFactors(dgList, method='TMM')
Test.cts <- data.frame(t(cpm(dgList_norm, normalized.lib.sizes = T, log=F)))
colnames(Test.cts) <- gsub('\\.', '_', colnames(Test.cts))
return(list(Train.cts, TTest.cts))
}
## 6) Normalisation using TMM
# Function to apply normalisation
normalise.TMM <- function(train.df=TrainSet.raw[[1]], test.df=TestSet.raw[[1]]){
# Train
dgList <- DGEList(counts=train.df, genes=rownames(train.df))
dgList <- calcNormFactors(dgList, method='TMM')
Train.cts <- data.frame(t(cpm(dgList_norm, normalized.lib.sizes = T, log=T)))
# Normalise as later on we are applying reglarised regression whose assumption is normally distributed data
colnames(Train.cts) <- gsub('\\.', '_', colnames(Train.cts))
# test
dgList <- DGEList(counts=test.df, genes=rownames(test.df))
dgList <- calcNormFactors(dgList, method='TMM')
Test.cts <- data.frame(t(cpm(dgList_norm, normalized.lib.sizes = T, log=T)))
colnames(Test.cts) <- gsub('\\.', '_', colnames(Test.cts))
return(list(Train.cts, Test.cts))
}
## 6) Normalisation using TMM
# Function to apply normalisation
normalise.TMM <- function(train.df=TrainSet.raw[[1]], test.df=TestSet.raw[[1]]){
# Train
dgList <- DGEList(counts=train.df, genes=rownames(train.df))
dgList <- calcNormFactors(dgList, method='TMM')
Train.cts <- data.frame(t(cpm(dgList, normalized.lib.sizes = T, log=T)))
# Normalise as later on we are applying reglarised regression whose assumption is normally distributed data
colnames(Train.cts) <- gsub('\\.', '_', colnames(Train.cts))
# test
dgList <- DGEList(counts=test.df, genes=rownames(test.df))
dgList <- calcNormFactors(dgList, method='TMM')
Test.cts <- data.frame(t(cpm(dgList, normalized.lib.sizes = T, log=T)))
colnames(Test.cts) <- gsub('\\.', '_', colnames(Test.cts))
return(list(Train.cts, Test.cts))
}
# Normalise
counts.norm.part1 <- normalise.TMM(train.df=TrainSet.raw$part1, test.df=TestSet.raw$part2)
counts.norm.part2 <- normalise.TMM(train.df=TrainSet.raw[[2]], test.df=TestSet.raw[[2]])
# Normalise
counts.norm <
counts.norm.part1 <- NULL
rm(counts.norm.part1)
rm(counts.norm.part2)
# Normalise
counts.norm <- list
# Normalise
counts.norm <- list()
counts.norm$part1 <- normalise.TMM(train.df=TrainSet.raw$part1, test.df=TestSet.raw$part2)
counts.norm$part2 <- normalise.TMM(train.df=TrainSet.raw$part2, test.df=TestSet.raw$part2)
counts.norm$part1 <- normalise.TMM(train.df=TrainSet.raw$part1, test.df=TestSet.raw$part2)
counts.norm$part2 <- normalise.TMM(train.df=TrainSet.raw$part2, test.df=TestSet.raw$part2)
counts.norm$part3 <- normalise.TMM(train.df=TrainSet.raw$part3, test.df=TestSet.raw$part3)
counts.norm$part4 <- normalise.TMM(train.df=TrainSet.raw$part4, test.df=TestSet.raw$part4)
counts.norm$part5 <- normalise.TMM(train.df=TrainSet.raw$part5, test.df=TestSet.raw$part5)
counts.norm$part1
counts.norm$part1[[1]]
View(counts.norm$part1[[1]])
View(TrainSet.raw[[1]])
## 6) Normalisation using TMM
# Function to apply normalisation
normalise.TMM <- function(train.df=TrainSet.raw[[1]], test.df=TestSet.raw[[1]]){
# Train
dgList <- DGEList(counts=train.df, genes=rownames(train.df))
dgList <- calcNormFactors(dgList, method='TMM')
Train.cts <- data.frame(t(cpm(dgList, normalized.lib.sizes = T, log=T)))
# Normalise as later on we are applying reglarised regression whose assumption is normally distributed data
# test
dgList <- DGEList(counts=test.df, genes=rownames(test.df))
dgList <- calcNormFactors(dgList, method='TMM')
Test.cts <- data.frame(t(cpm(dgList, normalized.lib.sizes = T, log=T)))
return(list(Train.cts, Test.cts))
}
# Normalise
counts.norm <- list()
counts.norm$part1 <- normalise.TMM(train.df=TrainSet.raw$part1, test.df=TestSet.raw$part2)
View(counts.norm$part1[[1]])
temp <- rownames(train.df)
## 6) Normalisation using TMM
# Function to apply normalisation
normalise.TMM <- function(train.df=TrainSet.raw[[1]], test.df=TestSet.raw[[1]]){
# Train
dgList <- DGEList(counts=train.df, genes=rownames(train.df))
dgList <- calcNormFactors(dgList, method='TMM')
Train.cts <- data.frame(t(cpm(dgList, normalized.lib.sizes = T, log=T)))
# Normalise as later on we are applying reglarised regression whose assumption is normally distributed data
colnames(Train.cts) <- rownames(train.df)
# test
dgList <- DGEList(counts=test.df, genes=rownames(test.df))
dgList <- calcNormFactors(dgList, method='TMM')
Test.cts <- data.frame(t(cpm(dgList, normalized.lib.sizes = T, log=T)))
colnames(Test.cts) <- rownames(train.df)
return(list(Train.cts, Test.cts))
}
# Normalise
counts.norm <- list()
counts.norm$part1 <- normalise.TMM(train.df=TrainSet.raw$part1, test.df=TestSet.raw$part2)
train.df=TrainSet.raw[[1]]
# Train
dgList <- DGEList(counts=train.df, genes=rownames(train.df))
dgList <- calcNormFactors(dgList, method='TMM')
Train.cts <- data.frame(t(cpm(dgList, normalized.lib.sizes = T, log=T)))
dim(Train.cts)
View(Train.cts)
rownames(train.df)
colnames(Train.cts)
length(rownames(train.df)); length(colnames(Train.cts))
rownames(train.df)[1:10]; colnames(Train.cts)[1:10]
Train.cts <- cpm(dgList, normalized.lib.sizes = T, log=T))
Train.cts <- cpm(dgList, normalized.lib.sizes = T, log=T)
colnames(Train.cts)
rownames(Train.cts)
# Normalise as later on we are applying reglarised regression whose assumption is normally distributed data
temp <- rownames(Train.cts)
temp
Train.cts <- data.frame(t(Train.cts))
View(Train.cts)
rownames(Train.cts)[1:5];temp[1:5]
colnames(Train.cts)[1:5];temp[1:5]
temp
colnames(Train.cts) <- temp
## 6) Normalisation using TMM
# Function to apply normalisation
normalise.TMM <- function(train.df=TrainSet.raw[[1]], test.df=TestSet.raw[[1]]){
# Train
dgList <- DGEList(counts=train.df, genes=rownames(train.df))
dgList <- calcNormFactors(dgList, method='TMM')
Train.cts <- cpm(dgList, normalized.lib.sizes = T, log=T)
# Normalise as later on we are applying reglarised regression whose assumption is normally distributed data
temp <- rownames(Train.cts)
Train.cts <- data.frame(t(Train.cts))
colnames(Train.cts) <- temp
# test
dgList <- DGEList(counts=test.df, genes=rownames(test.df))
dgList <- calcNormFactors(dgList, method='TMM')
Test.cts <- data.frame(t(cpm(dgList, normalized.lib.sizes = T, log=T)))
temp <- rownames(Test.cts)
Test.cts <- data.frame(t(Test.cts))
colnames(Test.cts) <- temp
return(list(Train.cts, Test.cts))
}
## 6) Normalisation using TMM
# Function to apply normalisation
normalise.TMM <- function(train.df=TrainSet.raw[[1]], test.df=TestSet.raw[[1]]){
# Train
dgList <- DGEList(counts=train.df, genes=rownames(train.df))
dgList <- calcNormFactors(dgList, method='TMM')
Train.cts <- cpm(dgList, normalized.lib.sizes = T, log=T)
# Normalise as later on we are applying reglarised regression whose assumption is normally distributed data
temp <- rownames(Train.cts)
Train.cts <- data.frame(t(Train.cts))
colnames(Train.cts) <- temp
# test
dgList <- DGEList(counts=test.df, genes=rownames(test.df))
dgList <- calcNormFactors(dgList, method='TMM')
Test.cts <- data.frame(t(cpm(dgList, normalized.lib.sizes = T, log=T)))
temp <- rownames(Test.cts)
Test.cts <- data.frame(t(Test.cts))
colnames(Test.cts) <- temp
return(list(Train.cts, Test.cts))
}
# Normalise
counts.norm <- list()
counts.norm$part1 <- normalise.TMM(train.df=TrainSet.raw$part1, test.df=TestSet.raw$part2)
View(counts.norm$part1)
View(counts.norm$part1[[1]])
max(counts.norm$part1[[1]])
counts.norm$part1 <- normalise.TMM(train.df=TrainSet.raw$part1, test.df=TestSet.raw$part2)
counts.norm$part2 <- normalise.TMM(train.df=TrainSet.raw$part2, test.df=TestSet.raw$part2)
counts.norm$part3 <- normalise.TMM(train.df=TrainSet.raw$part3, test.df=TestSet.raw$part3)
counts.norm$part4 <- normalise.TMM(train.df=TrainSet.raw$part4, test.df=TestSet.raw$part4)
counts.norm$part5 <- normalise.TMM(train.df=TrainSet.raw$part5, test.df=TestSet.raw$part5)
rm(Train.cts)
rm(train.df)
rm(TrainSet.raw)
rm(TestSet.raw)
rm(dgList)
rm(outcome., temp)
rm(outcome, temp)
#
save.image('/home/sharmila/Documents/github_projects_with_data/ch4_PrognosticModels/code/PrognosticMirModels_200703.Rdata')
max(counts.norm$part1[[1]])
max(counts.norm$part1[[2]])
max(counts.norm$part2[[1]]); max(counts.norm$part2[[2]])
max(counts.norm$part3[[1]]); max(counts.norm$part3[[2]])
max(counts.norm$part4[[1]]); max(counts.norm$part4[[2]])
setwd('~/Documents/github_projects/ch3_Review_MetaAnalysis/')
source('data/TCGA/mergeTCGAmaturemirna.R') # Code to get miR counts out of GDC
rm(list=ls())
## Load the prepared dataframes from MetaAnalysis_db.R
load('/home/sharmila/Documents/github_projects_with_data/ch3_Review_MetaAnalysis/code/MetaAnalysis_CoxPH.Rdata')
TCGA.cox.df$stage_event_psa
as.numeric(TCGA.cox.df$stage_event_psa)
View(hist.psa)
# Edit the psa column
hist.psa <- hist.psa %>%
mutate(psa = as.numeric(psa)) %>%
filter(!is.na(psa))
library(dplyr)
##### PSA #####
## 1) Prepare a df in order to scatter plot for age variable
hist.psa <- rbind(data.frame(psa= as.numeric(TCGA.cox.df$stage_event_psa), study=rep('TCGA-PRAD')),
data.frame(psa= as.numeric(Suer.cox.df$PSA)[!is.na(as.numeric(Suer.cox.df$PSA))], study=rep('GSE88958')),
data.frame(psa= Leite.cox.df$Pre.surgery.PSA, study=rep('GSE46738')),
data.frame(psa= Long.test.cox.df$psa, study=rep('GSE26247')),
data.frame(psa= Long.train.cox.df$psa, study=rep('GSE26245')),
data.frame(psa= Taylor.cox.df$PreDxBxPSA, study=rep('GSE21036')))
# Edit the psa column
hist.psa <- hist.psa %>%
mutate(psa = as.numeric(psa)) %>%
filter(!is.na(psa))
View(hist.psa)
hist.psa$study=='TCGA-PRAD'
hist.psa$psa[hist.psa$study=='TCGA-PRAD']
hist.psa$psa[hist.psa$study=='TCGA-PRAD'] < 10
table(hist.psa$psa[hist.psa$study=='TCGA-PRAD'] < 10)
table(hist.psa$psa[hist.psa$study=='TCGA-PRAD'] >= 10)
table(hist.psa$psa[hist.psa$study=='TCGA-PRAD'] >= 10 & hist.psa$psa[hist.psa$study=='TCGA-PRAD'] <= 20)
table(hist.psa$psa[hist.psa$study=='TCGA-PRAD'] > 20)
table(is.na(as.numeric(TCGA.cox.df$stage_event_psa)))
40+364+3+26
# Stats
study='TCGA-PRAD'
table(hist.psa$psa[hist.psa$study==study]<10) #364
table(hist.psa$psa[hist.psa$study==study]>=10 & hist.psa$psa[hist.psa$study==Study]<=20) #3
table(hist.psa$psa[hist.psa$study==study]>20) #26
# Stats
study= 'GSE88958'# 'TCGA-PRAD'
table(hist.psa$psa[hist.psa$study==study]<10)
table(hist.psa$psa[hist.psa$study==study]>=10 & hist.psa$psa[hist.psa$study==study]<=20)
table(hist.psa$psa[hist.psa$study==study]>20)
as.numeric(Suer.cox.df$PSA)[!is.na(as.numeric(Suer.cox.df$PSA))]
as.numeric(Suer.cox.df$PSA)[!is.na(as.numeric(Suer.cox.df$PSA))] < 10
table(as.numeric(Suer.cox.df$PSA)[!is.na(as.numeric(Suer.cox.df$PSA))] < 10)
table(is.na(as.numeric(Suer.cox.df$PSA)))
12+4+3+11
# Stats
study= 'GSE46738'# 'TCGA-PRAD' 'GSE88958'
table(hist.psa$psa[hist.psa$study==study]<10)
table(hist.psa$psa[hist.psa$study==study]>=10 & hist.psa$psa[hist.psa$study==study]<=20)
table(hist.psa$psa[hist.psa$study==study]>20)
Leite.cox.df$Pre.surgery.PSA
table(is.na(Leite.cox.df$Pre.surgery.PSA)
)
table(hist.psa$psa[hist.psa$study==study]<10)
table(hist.psa$psa[hist.psa$study==study]>=10 & hist.psa$psa[hist.psa$study==study]<=20)
table(hist.psa$psa[hist.psa$study==study]>20)
table(is.na(Leite.cox.df$Pre.surgery.PSA)
)
36+13+1
# Stats
study= 'GSE26247' # 'TCGA-PRAD' 'GSE88958' 'GSE46738' 'GSE26247'
table(hist.psa$psa[hist.psa$study==study]<10)
table(hist.psa$psa[hist.psa$study==study]>=10 & hist.psa$psa[hist.psa$study==study]<=20)
table(hist.psa$psa[hist.psa$study==study]>20)
14+17+4+5
# Stats
study= 'GSE26245' # 'TCGA-PRAD' 'GSE88958' 'GSE46738' 'GSE26247'
table(hist.psa$psa[hist.psa$study==study]<10)
table(hist.psa$psa[hist.psa$study==study]>=10 & hist.psa$psa[hist.psa$study==study]<=20)
table(hist.psa$psa[hist.psa$study==study]>20)
table(is.na(Leite.cox.df$Pre.surgery.PSA))
14+18+2+2
table(is.na(Long.train.cox.df$psa))
41+18+2+2
# Stats
study='GSE21036'#'TCGA-PRAD','GSE88958','GSE46738','GSE26247','GSE26245','GSE21036'
table(hist.psa$psa[hist.psa$study==study]<10)
table(hist.psa$psa[hist.psa$study==study]>=10 & hist.psa$psa[hist.psa$study==study]<=20)
table(hist.psa$psa[hist.psa$study==study]>20)
80+12+6+1
